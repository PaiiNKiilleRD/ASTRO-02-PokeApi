---
import type { GetStaticPaths } from "astro";
import type { PokemonListResponse } from "@interfaces/pokemon-list.response";

import Layout from "@/layout/Layout.astro";
import PokemonCard from "@components/pokemons/PokemonCard.astro";
import type { number } from "astro/zod";
import Title from "@components/Title.astro";
import { Icon } from "astro-icon/components";
import HomeButton from "@components/HomeButton.astro";
import BackButton from "@components/BackButton.astro";

export const getStaticPaths = (async () => {
  const resp = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");

  const { results } = (await resp.json()) as PokemonListResponse;

  return results.map(({ name, url }) => ({
    params: { name: name },
    props: { name: name, url: url },
  }));
}) satisfies GetStaticPaths;

const { name } = Astro.params;
const { url } = Astro.props;

const id = url.split("/").at(-2);
const audiSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;

const imageSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;
---

<Layout
  title={`Pokemon - #${id} ${name}`}
  description={`Informacion sobre el pokemon ${name}`}
  image={imageSrc}
>
  <section class="h-screen flex pt-[100px] justify-center">
    <div class="flex items-center flex-col container">
      <!-- Home button -->
      <HomeButton />
      <!-- Back button -->
      <BackButton />
      <!-- Pokemon info -->
      <div class="flex items-center">
        <div>
          <Title>{name}</Title>
        </div>
        <button
          id="btn-favorite"
          class="ml-4 hover:cursor-pointer"
          data-name={name}
          data-id={id}
        >
          <Icon data-outline name="heart-outline" size={50} />
          <Icon data-full class="hidden" name="heart-full" size={50} />
        </button>
      </div>

      <PokemonCard name={name} url={url} isBig />

      <audio controls class="mt-5">
        <source src={audiSrc} type="audio/ogg" />
        AUDIO NO SOPORTADO
      </audio>
    </div>
  </section>
</Layout>

<script>
  interface FavoritePokemon {
    name: string;
    id: number;
  }

  const handlePageLoad = () => {
    let favoritePokemons: FavoritePokemon[] = JSON.parse(
      localStorage.getItem("favorites") ?? "[]"
    );

    const btnFavorite = document.querySelector(
      "#btn-favorite"
    ) as HTMLButtonElement;

    if (!btnFavorite) return;

    const name = btnFavorite.dataset.name ?? "";
    const id = btnFavorite.dataset.id ?? "";

    const heartOutline = btnFavorite.querySelector(
      "[data-outline]"
    ) as HTMLElement;
    const heartFull = btnFavorite.querySelector("[data-full]") as HTMLElement;

    const showFavoriteHeart = () => {
      const isFavorite = favoritePokemons.some((fav) => fav.name === name);

      if (!isFavorite) {
        return;
      } else {
        heartOutline.classList.toggle("hidden");
        heartFull.classList.toggle("hidden");
      }
    };

    const toggleFavorite = () => {
      const isFavorite = favoritePokemons.some((fav) => fav.name === name);

      if (isFavorite) {
        favoritePokemons = favoritePokemons.filter((fav) => fav.name !== name);
      } else {
        favoritePokemons.push({
          id: +id,
          name: name,
        });
      }

      localStorage.setItem("favorites", JSON.stringify(favoritePokemons));
    };

    btnFavorite.addEventListener("click", () => {
      heartOutline.classList.toggle("hidden");
      heartFull.classList.toggle("hidden");

      toggleFavorite();
    });

    showFavoriteHeart();
  };

  document.addEventListener("astro:page-load", handlePageLoad);
</script>

<style>
  @import "tailwindcss";

  #btn-favorite {
    @apply hover:animate-pulse;
  }
</style>
